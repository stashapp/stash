type SceneMarker {
  id: ID!
  scene: Scene!
  title: String!
  "The required start time of the marker (in seconds). Supports decimals."
  seconds: Float!
  "The optional end time of the marker (in seconds). Supports decimals."
  end_seconds: Float
  primary_tag: Tag!
  tags: [Tag!]!
  created_at: Time!
  updated_at: Time!

  "The path to stream this marker"
  stream: String! # Resolver
  "The path to the preview image for this marker"
  preview: String! # Resolver
  "The path to the screenshot image for this marker"
  screenshot: String! # Resolver
}

input SceneMarkerCreateInput {
  title: String!
  "The required start time of the marker (in seconds). Supports decimals."
  seconds: Float!
  "The optional end time of the marker (in seconds). Supports decimals."
  end_seconds: Float
  scene_id: ID!
  primary_tag_id: ID!
  tag_ids: [ID!]
}

input SceneMarkerUpdateInput {
  id: ID!
  title: String
  "The start time of the marker (in seconds). Supports decimals."
  seconds: Float
  "The end time of the marker (in seconds). Supports decimals."
  end_seconds: Float
  scene_id: ID
  primary_tag_id: ID
  tag_ids: [ID!]
}

type FindSceneMarkersResultType {
  count: Int!
  scene_markers: [SceneMarker!]!
}

type MarkerStringsResultType {
  count: Int!
  id: ID!
  title: String!
}
