// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/stashapp/stash/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// TagReaderWriter is an autogenerated mock type for the TagReaderWriter type
type TagReaderWriter struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *TagReaderWriter) All(ctx context.Context) ([]*models.Tag, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Tag, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Tag); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields: ctx
func (_m *TagReaderWriter) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByChildTagID provides a mock function with given fields: ctx, childID
func (_m *TagReaderWriter) CountByChildTagID(ctx context.Context, childID int) (int, error) {
	ret := _m.Called(ctx, childID)

	if len(ret) == 0 {
		panic("no return value specified for CountByChildTagID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, childID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, childID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, childID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByParentTagID provides a mock function with given fields: ctx, parentID
func (_m *TagReaderWriter) CountByParentTagID(ctx context.Context, parentID int) (int, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for CountByParentTagID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, parentID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, newTag
func (_m *TagReaderWriter) Create(ctx context.Context, newTag *models.Tag) error {
	ret := _m.Called(ctx, newTag)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) error); ok {
		r0 = rf(ctx, newTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: ctx, id
func (_m *TagReaderWriter) Destroy(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, id
func (_m *TagReaderWriter) Find(ctx context.Context, id int) (*models.Tag, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Tag, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllAncestors provides a mock function with given fields: ctx, tagID, excludeIDs
func (_m *TagReaderWriter) FindAllAncestors(ctx context.Context, tagID int, excludeIDs []int) ([]*models.TagPath, error) {
	ret := _m.Called(ctx, tagID, excludeIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindAllAncestors")
	}

	var r0 []*models.TagPath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) ([]*models.TagPath, error)); ok {
		return rf(ctx, tagID, excludeIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) []*models.TagPath); ok {
		r0 = rf(ctx, tagID, excludeIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TagPath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []int) error); ok {
		r1 = rf(ctx, tagID, excludeIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllDescendants provides a mock function with given fields: ctx, tagID, excludeIDs
func (_m *TagReaderWriter) FindAllDescendants(ctx context.Context, tagID int, excludeIDs []int) ([]*models.TagPath, error) {
	ret := _m.Called(ctx, tagID, excludeIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindAllDescendants")
	}

	var r0 []*models.TagPath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) ([]*models.TagPath, error)); ok {
		return rf(ctx, tagID, excludeIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) []*models.TagPath); ok {
		r0 = rf(ctx, tagID, excludeIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TagPath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []int) error); ok {
		r1 = rf(ctx, tagID, excludeIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByChildTagID provides a mock function with given fields: ctx, childID
func (_m *TagReaderWriter) FindByChildTagID(ctx context.Context, childID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, childID)

	if len(ret) == 0 {
		panic("no return value specified for FindByChildTagID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, childID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, childID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, childID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByGalleryID provides a mock function with given fields: ctx, galleryID
func (_m *TagReaderWriter) FindByGalleryID(ctx context.Context, galleryID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, galleryID)

	if len(ret) == 0 {
		panic("no return value specified for FindByGalleryID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, galleryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, galleryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, galleryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByGroupID provides a mock function with given fields: ctx, groupID
func (_m *TagReaderWriter) FindByGroupID(ctx context.Context, groupID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for FindByGroupID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByImageID provides a mock function with given fields: ctx, imageID
func (_m *TagReaderWriter) FindByImageID(ctx context.Context, imageID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, imageID)

	if len(ret) == 0 {
		panic("no return value specified for FindByImageID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, imageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, imageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, imageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name, nocase
func (_m *TagReaderWriter) FindByName(ctx context.Context, name string, nocase bool) (*models.Tag, error) {
	ret := _m.Called(ctx, name, nocase)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*models.Tag, error)); ok {
		return rf(ctx, name, nocase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *models.Tag); ok {
		r0 = rf(ctx, name, nocase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, name, nocase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNames provides a mock function with given fields: ctx, names, nocase
func (_m *TagReaderWriter) FindByNames(ctx context.Context, names []string, nocase bool) ([]*models.Tag, error) {
	ret := _m.Called(ctx, names, nocase)

	if len(ret) == 0 {
		panic("no return value specified for FindByNames")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, bool) ([]*models.Tag, error)); ok {
		return rf(ctx, names, nocase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, bool) []*models.Tag); ok {
		r0 = rf(ctx, names, nocase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, bool) error); ok {
		r1 = rf(ctx, names, nocase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByParentTagID provides a mock function with given fields: ctx, parentID
func (_m *TagReaderWriter) FindByParentTagID(ctx context.Context, parentID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for FindByParentTagID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPerformerID provides a mock function with given fields: ctx, performerID
func (_m *TagReaderWriter) FindByPerformerID(ctx context.Context, performerID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, performerID)

	if len(ret) == 0 {
		panic("no return value specified for FindByPerformerID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, performerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, performerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, performerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySceneID provides a mock function with given fields: ctx, sceneID
func (_m *TagReaderWriter) FindBySceneID(ctx context.Context, sceneID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, sceneID)

	if len(ret) == 0 {
		panic("no return value specified for FindBySceneID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, sceneID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, sceneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sceneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySceneMarkerID provides a mock function with given fields: ctx, sceneMarkerID
func (_m *TagReaderWriter) FindBySceneMarkerID(ctx context.Context, sceneMarkerID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, sceneMarkerID)

	if len(ret) == 0 {
		panic("no return value specified for FindBySceneMarkerID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, sceneMarkerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, sceneMarkerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sceneMarkerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStudioID provides a mock function with given fields: ctx, studioID
func (_m *TagReaderWriter) FindByStudioID(ctx context.Context, studioID int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, studioID)

	if len(ret) == 0 {
		panic("no return value specified for FindByStudioID")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Tag, error)); ok {
		return rf(ctx, studioID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Tag); ok {
		r0 = rf(ctx, studioID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, studioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, ids
func (_m *TagReaderWriter) FindMany(ctx context.Context, ids []int) ([]*models.Tag, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for FindMany")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) ([]*models.Tag, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int) []*models.Tag); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAliases provides a mock function with given fields: ctx, relatedID
func (_m *TagReaderWriter) GetAliases(ctx context.Context, relatedID int) ([]string, error) {
	ret := _m.Called(ctx, relatedID)

	if len(ret) == 0 {
		panic("no return value specified for GetAliases")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]string, error)); ok {
		return rf(ctx, relatedID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
		r0 = rf(ctx, relatedID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, relatedID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChildIDs provides a mock function with given fields: ctx, relatedID
func (_m *TagReaderWriter) GetChildIDs(ctx context.Context, relatedID int) ([]int, error) {
	ret := _m.Called(ctx, relatedID)

	if len(ret) == 0 {
		panic("no return value specified for GetChildIDs")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int, error)); ok {
		return rf(ctx, relatedID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = rf(ctx, relatedID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, relatedID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ctx, tagID
func (_m *TagReaderWriter) GetImage(ctx context.Context, tagID int) ([]byte, error) {
	ret := _m.Called(ctx, tagID)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]byte, error)); ok {
		return rf(ctx, tagID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []byte); ok {
		r0 = rf(ctx, tagID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParentIDs provides a mock function with given fields: ctx, relatedID
func (_m *TagReaderWriter) GetParentIDs(ctx context.Context, relatedID int) ([]int, error) {
	ret := _m.Called(ctx, relatedID)

	if len(ret) == 0 {
		panic("no return value specified for GetParentIDs")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int, error)); ok {
		return rf(ctx, relatedID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = rf(ctx, relatedID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, relatedID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasImage provides a mock function with given fields: ctx, tagID
func (_m *TagReaderWriter) HasImage(ctx context.Context, tagID int) (bool, error) {
	ret := _m.Called(ctx, tagID)

	if len(ret) == 0 {
		panic("no return value specified for HasImage")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, tagID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, tagID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Merge provides a mock function with given fields: ctx, source, destination
func (_m *TagReaderWriter) Merge(ctx context.Context, source []int, destination int) error {
	ret := _m.Called(ctx, source, destination)

	if len(ret) == 0 {
		panic("no return value specified for Merge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int, int) error); ok {
		r0 = rf(ctx, source, destination)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: ctx, tagFilter, findFilter
func (_m *TagReaderWriter) Query(ctx context.Context, tagFilter *models.TagFilterType, findFilter *models.FindFilterType) ([]*models.Tag, int, error) {
	ret := _m.Called(ctx, tagFilter, findFilter)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []*models.Tag
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TagFilterType, *models.FindFilterType) ([]*models.Tag, int, error)); ok {
		return rf(ctx, tagFilter, findFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TagFilterType, *models.FindFilterType) []*models.Tag); ok {
		r0 = rf(ctx, tagFilter, findFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TagFilterType, *models.FindFilterType) int); ok {
		r1 = rf(ctx, tagFilter, findFilter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.TagFilterType, *models.FindFilterType) error); ok {
		r2 = rf(ctx, tagFilter, findFilter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryForAutoTag provides a mock function with given fields: ctx, words
func (_m *TagReaderWriter) QueryForAutoTag(ctx context.Context, words []string) ([]*models.Tag, error) {
	ret := _m.Called(ctx, words)

	if len(ret) == 0 {
		panic("no return value specified for QueryForAutoTag")
	}

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*models.Tag, error)); ok {
		return rf(ctx, words)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.Tag); ok {
		r0 = rf(ctx, words)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, words)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updatedTag
func (_m *TagReaderWriter) Update(ctx context.Context, updatedTag *models.Tag) error {
	ret := _m.Called(ctx, updatedTag)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) error); ok {
		r0 = rf(ctx, updatedTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAliases provides a mock function with given fields: ctx, tagID, aliases
func (_m *TagReaderWriter) UpdateAliases(ctx context.Context, tagID int, aliases []string) error {
	ret := _m.Called(ctx, tagID, aliases)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAliases")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string) error); ok {
		r0 = rf(ctx, tagID, aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateChildTags provides a mock function with given fields: ctx, tagID, parentIDs
func (_m *TagReaderWriter) UpdateChildTags(ctx context.Context, tagID int, parentIDs []int) error {
	ret := _m.Called(ctx, tagID, parentIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChildTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) error); ok {
		r0 = rf(ctx, tagID, parentIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: ctx, tagID, image
func (_m *TagReaderWriter) UpdateImage(ctx context.Context, tagID int, image []byte) error {
	ret := _m.Called(ctx, tagID, image)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte) error); ok {
		r0 = rf(ctx, tagID, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateParentTags provides a mock function with given fields: ctx, tagID, parentIDs
func (_m *TagReaderWriter) UpdateParentTags(ctx context.Context, tagID int, parentIDs []int) error {
	ret := _m.Called(ctx, tagID, parentIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParentTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) error); ok {
		r0 = rf(ctx, tagID, parentIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePartial provides a mock function with given fields: ctx, id, updateTag
func (_m *TagReaderWriter) UpdatePartial(ctx context.Context, id int, updateTag models.TagPartial) (*models.Tag, error) {
	ret := _m.Called(ctx, id, updateTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartial")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, models.TagPartial) (*models.Tag, error)); ok {
		return rf(ctx, id, updateTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, models.TagPartial) *models.Tag); ok {
		r0 = rf(ctx, id, updateTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, models.TagPartial) error); ok {
		r1 = rf(ctx, id, updateTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTagReaderWriter creates a new instance of TagReaderWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagReaderWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagReaderWriter {
	mock := &TagReaderWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
