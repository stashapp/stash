// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/stashapp/stash/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SavedFilterReaderWriter is an autogenerated mock type for the SavedFilterReaderWriter type
type SavedFilterReaderWriter struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *SavedFilterReaderWriter) All(ctx context.Context) ([]*models.SavedFilter, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*models.SavedFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.SavedFilter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.SavedFilter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SavedFilter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, obj
func (_m *SavedFilterReaderWriter) Create(ctx context.Context, obj *models.SavedFilter) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SavedFilter) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: ctx, id
func (_m *SavedFilterReaderWriter) Destroy(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, id
func (_m *SavedFilterReaderWriter) Find(ctx context.Context, id int) (*models.SavedFilter, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *models.SavedFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.SavedFilter, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.SavedFilter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SavedFilter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMode provides a mock function with given fields: ctx, mode
func (_m *SavedFilterReaderWriter) FindByMode(ctx context.Context, mode models.FilterMode) ([]*models.SavedFilter, error) {
	ret := _m.Called(ctx, mode)

	if len(ret) == 0 {
		panic("no return value specified for FindByMode")
	}

	var r0 []*models.SavedFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterMode) ([]*models.SavedFilter, error)); ok {
		return rf(ctx, mode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FilterMode) []*models.SavedFilter); ok {
		r0 = rf(ctx, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SavedFilter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FilterMode) error); ok {
		r1 = rf(ctx, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, ids, ignoreNotFound
func (_m *SavedFilterReaderWriter) FindMany(ctx context.Context, ids []int, ignoreNotFound bool) ([]*models.SavedFilter, error) {
	ret := _m.Called(ctx, ids, ignoreNotFound)

	if len(ret) == 0 {
		panic("no return value specified for FindMany")
	}

	var r0 []*models.SavedFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int, bool) ([]*models.SavedFilter, error)); ok {
		return rf(ctx, ids, ignoreNotFound)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int, bool) []*models.SavedFilter); ok {
		r0 = rf(ctx, ids, ignoreNotFound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SavedFilter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int, bool) error); ok {
		r1 = rf(ctx, ids, ignoreNotFound)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, obj
func (_m *SavedFilterReaderWriter) Update(ctx context.Context, obj *models.SavedFilter) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SavedFilter) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSavedFilterReaderWriter creates a new instance of SavedFilterReaderWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSavedFilterReaderWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *SavedFilterReaderWriter {
	mock := &SavedFilterReaderWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
